The WEB
  Internet(or the web) is a massive distributed client/server information system as depicted in the following diagram.

Request Message:  1.Request Message Header; 
                  2.A blank line; 
                  3.Request Message Body.
                  
1.Request Message Header: 1.1. Request Line; 
                          1.2. Request Headers.
                          
1.1. Request Line:1.1.1. request-method-name:HTTP protocol defines a set of request methods, e.g., GET, POST, HEAD, and OPTIONS. The client can use one of these methods to send a request to the server.
                  1.1.2. request-URI:specifies the resource requested.
                  1.1.3. HTTP-version:Two versions are currently in ues: HTTP/1.0 and HTTP/1.1
     Examples:  GET /test.html HTTP/1.1
                or HEAD /query.html HTTP/1.0
                or POST /index.html HTTP/1.1

1.2. Request Headers: 1.2.1. request-header-name
                      1.2.2. request-header-value1, request-header-value2,....
     Examples:  Host: www.xyz.com
                Connection: Keep-Alive
                Accept: image/gif, image/jpeg, */*
                Accept-Language: us-en, fr, cn

Response Message: 1.Response Message Header
                  2.A blank Line
                  3.Response Message Body
                  
1.Response Message Header:  1.1. Status Line
                            1.2. Response Headers
1.1. Status Line: HTTP-version status-code reason-phrase
                  
                  HTTP-version: HTTP/1.0 and HTTP/1.1
                  status-code: a 3-digit number generated by the server to reflect the outcome of the request
                  reason-phrase: gives a short explaation to the status code.
                  Common status code and reason phrase are "200 OK", "404 Not Found", "403 Forbidden", "500 Internal Server Error"
                  
     Example: HTTP/1.1 200 OK
              HTTP/1.0 404 Not Found
              HTTP/1.1 403 Forbidden
   
   
HTTP Request Method: HTTP protocol defines a set of request methods. A client can use one of these request methods to send a request message to an HTTP server.
  GET: A client can use the GET request to get a web resource from the server.
  HEAD: A client can use the HEAD request to get the header that a GET request would have obtained. Since the header contains the last-modified date of the data, this can be used to check against the local cache copy.
  POST: Used to post data up to the web server.
  PUT: Ask the server to store the data.
  DELETE: Ask the server to delete the data.
  TRACE: Ask the server to return a diagnostic trace of the actions it takes.
  OPTIONS: Ask the server to return the list of request methods it supports.
  CONNECT: Used to tell a proxy to make a connection to another host and simply reply the content, without attempting to parse or cache it. This is often used to make SSL connection through the proxy.
  
  
Response Status Code
  1xx(informational): Request received, server is continuing the process.
      100 Continue: The server received the request and in the process of giving the response.
  2xx(success): The request was successfully received, understood, accepted and serviced.
      200 OK: The request is fulfilled.
  3xx(redirection): Further action must be taken in order to complete the request.    
      301 Move Permanently: The resource requested for has been permanently moved to a new location. The URL of the new location is given in the response header called Location. The client should issue a new request to the new location. Application should update all references to this new location.
      302 Found & Redirect(or Move Temporarily):  Same as 301, but the new location is temporarily in nature. The client should issue a new request, but applications need not update the references.
      304 Not Modified: In response to the If-Modified-Since conditional GET request, the server notifies that the resource requested has not been modified.
  4xx(Client Error):  The request contains bad syntax or cannot be understood.
      400 Bad Request:  Server could not interpret or understand the request, probably syntax error in the request message.
      401 Authentication Required: The requested resource is protected, and require client's credential(username/password). The client should re-submit the request with his credential(username/password).
      403 Forbidden:  Server refuses to supply the resource, regardless of identity of client.
      404 Not Found:  The requested resource cannot be found in the server.
      405 Method Not Allowed: The request method used, e.g., POST, PUT, DELETE, is a valid method. However, the server does not allow that method for the resource requested.
      408 Request Timeout:
      414 Request URI too Large:
  5xx(Server Error): The server failed to fulfill an apparently valid request.
      500 Internal Server Error:  Srver is confused, often caused by anerror in the server-side program responding to the request.
      501 Method Not Implemented: The request method used in invalid(could be caused by a typing error, e.g., "GET" misspell as "Get")
      502 Bad Gateway:  Proxy or Gateway indicates that it receives a bad response from the upstream server.
      503 Service Unavailable:  Server cannot response due to overloading or maintenance. The client can try again later.
      504 Gateway Timeout:  Proxy or Gateway indicates that it receives a timeout from an upstream server.
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
              
              
              
              
              
              
                            
